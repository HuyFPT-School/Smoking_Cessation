package com.example.demo.Controller;

import com.example.demo.DTO.AdminDTO;
import com.example.demo.DTO.AdminUserDTO;
import com.example.demo.DTO.UserProfileDTO;
import com.example.demo.service.AdminServicePackage.dashboard.AdminDashboardService;
import com.example.demo.service.AdminServicePackage.user.AdminRemoteService;
import com.example.demo.service.AdminServicePackage.user.AdminUserService;
import com.example.demo.service.AdminServicePackage.content.AdminCommunityService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
@CrossOrigin                             // Cho ph√©p frontend ·ªü domain kh√°c (vd: React ch·∫°y ·ªü http://localhost:3000) g·ªçi API n√†y
@RestController                          // Controller ki·ªÉu RESTful, t·ª± ƒë·ªông tr·∫£ JSON thay v√¨ HTML
@RequestMapping("/api/admin")
@RequiredArgsConstructor
public class AdminController {

    @Autowired
    private  AdminCommunityService adminCommunityService;

    @Autowired
    private AdminDashboardService dashboardService;

    @Autowired
    private AdminUserService adminUserService;

    @Autowired
    private AdminRemoteService adminRemoteService;


    // ==================== DASHBOARD ====================

    // ‚úÖ L·∫•y d·ªØ li·ªáu t·ªïng quan dashboard (s·ªë user, admin, v.v...)
    // üìå D√πng chung cho c·∫£ ADMIN v√† SUPER_ADMIN
    @GetMapping("/dashboard")
    public AdminDTO getDashboardData() {
        return dashboardService.getTotalUserStats();
    }

    // ==================== QU·∫¢N L√ù USER ====================

    // ‚úÖ Tr·∫£ v·ªÅ danh s√°ch user th∆∞·ªùng (trong ph·∫ßn users c·ªßa trang admin)
    // üìå C·∫£ ADMIN v√† SUPER_ADMIN ƒë·ªÅu xem ƒë∆∞·ª£c
    @GetMapping("/users")
    public List<AdminUserDTO> getUsersForAdmin(@RequestParam int currentAdminId) {
        return adminUserService.getAllUsersVisibleToAdmin(currentAdminId);
    }

    // ‚úÖ Tr·∫£ v·ªÅ danh s√°ch c√°c admin hi·ªán t·∫°i (ch·ªâ SUPER_ADMIN xem)
    @GetMapping("/admins")
    public List<AdminUserDTO> getAllAdmins(@RequestParam int currentAdminId) {
        return adminUserService.getAllAdmins(currentAdminId);
    }

    // ‚úÖ L·∫•y chi ti·∫øt profile
    // üìå D√πng cho modal xem chi ti·∫øt h·ªì s∆° trong giao di·ªán admin
    @GetMapping("/user/{id}")
    public ResponseEntity<UserProfileDTO> getUserProfile(@PathVariable Integer id) {
        UserProfileDTO dto = adminUserService.getUserProfileByUserId(id);
        if (dto == null) {
            return ResponseEntity.notFound().build();  // Tr·∫£ v·ªÅ 404 n·∫øu kh√¥ng t√¨m th·∫•y user
        }
        return ResponseEntity.ok(dto);
    }

    // ‚úÖ X√≥a 1 user th∆∞·ªùng
    // üìå Ch·ªâ ADMIN ho·∫∑c SUPER_ADMIN m·ªõi ƒë∆∞·ª£c th·ª±c hi·ªán
    @DeleteMapping("/delete-user/{userId}")
    public ResponseEntity<?> deleteUser(@PathVariable String userId,
                                        @RequestParam String currentAdminId) {
        boolean success = adminRemoteService.deleteUserByAdmin(userId, currentAdminId);
        return success
                ? ResponseEntity.ok("User deleted successfully")
                : ResponseEntity.badRequest().body("Permission denied or invalid target");
    }

    // ==================== QU·∫¢N L√ù PH√ÇN QUY·ªÄN ====================

    // ‚úÖ N√¢ng quy·ªÅn user th∆∞·ªùng th√†nh admin
    // üìå Ch·ªâ SUPER_ADMIN m·ªõi ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán h√†nh ƒë·ªông n√†y
    @PutMapping("/promote/{userId}")
    public ResponseEntity<?> promoteUserToAdmin(@PathVariable String userId,
                                                @RequestParam String currentAdminId) {
        boolean success = adminRemoteService.promoteToAdmin(userId, currentAdminId);
        return success
                ? ResponseEntity.ok("Promoted to ADMIN successfully")
                : ResponseEntity.badRequest().body("Permission denied or invalid target");
    }

    // ‚úÖ Gi√°ng c·∫•p admin th√†nh user th∆∞·ªùng
    // üìå Ch·ªâ SUPER_ADMIN m·ªõi ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán h√†nh ƒë·ªông n√†y
    @PutMapping("/demote/{adminId}")
    public ResponseEntity<?> demoteAdmin(@PathVariable String adminId,
                                         @RequestParam String currentAdminId) {
        boolean success = adminRemoteService.demoteAdminToUser(adminId, currentAdminId);
        return success
                ? ResponseEntity.ok("Admin demoted to USER successfully")
                : ResponseEntity.badRequest().body("Permission denied or invalid target");
    }

    // ==================== QU·∫¢N L√ù COMMUNITY (BLOG, COMMENT) ====================

    /**
     * ‚úÖ X√≥a b√†i vi·∫øt b·∫•t k·ª≥
     * üìå Ch·ªâ ADMIN ho·∫∑c SUPER_ADMIN c√≥ quy·ªÅn
     * üîó Endpoint v√≠ d·ª•: DELETE /api/admin/posts/delete/45?adminId=2
     */
    @DeleteMapping("/posts/delete/{postId}")
    public ResponseEntity<?> deletePostByAdmin(@PathVariable Integer postId,
                                               @RequestParam Integer adminId) {
        return adminCommunityService.deletePostByAdmin(postId, adminId);
    }

    /**
     * ‚úÖ X√≥a b√¨nh lu·∫≠n b·∫•t k·ª≥
     * üìå Ch·ªâ ADMIN ho·∫∑c SUPER_ADMIN c√≥ quy·ªÅn
     * üîó Endpoint v√≠ d·ª•: DELETE /api/admin/comments/delete/12?adminId=2
     */
    @DeleteMapping("/comments/delete/{commentId}")
    public ResponseEntity<?> deleteCommentByAdmin(@PathVariable Integer commentId,
                                                  @RequestParam Integer adminId) {
        return adminCommunityService.deleteCommentByAdmin(commentId, adminId);
    }
}
