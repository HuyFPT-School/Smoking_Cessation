package com.example.demo.service;

import com.example.demo.DTO.AIResponseDTO;
import com.example.demo.DTO.ChatMessageDTO;
import com.example.demo.DTO.ChatRequestDTO;
import com.example.demo.Repo.ChatMessageRepository;
import com.example.demo.entity.ChatMessage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.stream.Collectors;
import java.util.Calendar;

@Service
public class GeminiAICoachService {
      @Value("${google.ai.api.key}")
    private String apiKey;
      @Value("${google.ai.model:gemini-1.5-flash}")  // ‚úÖ Using free Flash model for unlimited usage
    private String model;
    
    @Autowired
    private ChatMessageRepository chatMessageRepository;
    
    private final RestTemplate restTemplate = new RestTemplate();
    
    public AIResponseDTO generateResponse(ChatRequestDTO request) {
        try {
            // L∆∞u tin nh·∫Øn user
            saveChatMessage(request.getUserId(), request.getMessage(), "USER");
            
            // T·∫°o context cho coach
            String prompt = buildCoachPrompt(request.getMessage(), request.getUserId());
            
            // G·ªçi Gemini API
            String aiResponse = callGeminiAPIWithRetry(prompt);
            
            // L∆∞u ph·∫£n h·ªìi AI
            saveChatMessage(request.getUserId(), aiResponse, "AI");
            
            return new AIResponseDTO(aiResponse);
              } catch (Exception e) {
            System.err.println("Error generating AI response: " + e.getMessage());
            // Smart fallback response d·ª±a tr√™n tin nh·∫Øn user
            String fallbackResponse = getSmartFallbackResponse(request.getMessage());
            saveChatMessage(request.getUserId(), fallbackResponse, "AI");
            return new AIResponseDTO(fallbackResponse, "fallback");
        }
    }
      private String callGeminiAPI(String prompt) {
        // C·∫≠p nh·∫≠t URL format cho API m·ªõi
        String url = String.format("https://generativelanguage.googleapis.com/v1beta/models/%s:generateContent?key=%s", 
                                   model, apiKey);
        
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        
        Map<String, Object> requestBody = Map.of(
            "contents", List.of(
                Map.of("parts", List.of(
                    Map.of("text", prompt)
                ))
            ),            "generationConfig", Map.of(
                "temperature", 0.4,  // ‚úÖ Gi·∫£m ƒë·ªÉ focused v√† consistent h∆°n
                "topK", 30,          // ‚úÖ Gi·∫£m ƒë·ªÉ √≠t random h∆°n
                "topP", 0.8,         // ‚úÖ Gi·∫£m ƒë·ªÉ stable h∆°n
                "maxOutputTokens", 400,  // ‚úÖ TƒÉng ƒë·ªÉ ph·∫£n h·ªìi chi ti·∫øt h∆°n
                "candidateCount", 1,
                "stopSequences", List.of("---", "###", "User:", "Q:")
            ),
            "safetySettings", List.of(
                Map.of("category", "HARM_CATEGORY_HARASSMENT", "threshold", "BLOCK_ONLY_HIGH"),
                Map.of("category", "HARM_CATEGORY_HATE_SPEECH", "threshold", "BLOCK_ONLY_HIGH"), 
                Map.of("category", "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold", "BLOCK_ONLY_HIGH"),
                Map.of("category", "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold", "BLOCK_ONLY_HIGH")
            )
        );
        
        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
          try {
            ResponseEntity<Map> response = restTemplate.postForEntity(url, entity, Map.class);
              if (response.getBody() != null) {
                Map<String, Object> responseBody = response.getBody();
                
                // Check for API errors first
                if (responseBody.containsKey("error")) {
                    Map errorObj = (Map) responseBody.get("error");
                    String errorMsg = "Gemini API Error: " + errorObj.get("message");
                    System.err.println(errorMsg);
                    throw new RuntimeException(errorMsg);
                }
                
                List<Map> candidates = (List<Map>) responseBody.get("candidates");
                
                if (candidates != null && !candidates.isEmpty()) {
                    Map candidate = candidates.get(0);
                    
                    // Check if content was filtered
                    if (candidate.containsKey("finishReason")) {
                        String finishReason = (String) candidate.get("finishReason");
                        System.out.println("Finish reason: " + finishReason);
                        
                        if ("SAFETY".equals(finishReason)) {
                            return "T√¥i hi·ªÉu b·∫°n ƒëang c·∫ßn h·ªó tr·ª£, nh∆∞ng h√£y th·ª≠ di·ªÖn ƒë·∫°t kh√°c m·ªôt ch√∫t ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·ªët h∆°n. üòä";
                        } else if ("RECITATION".equals(finishReason)) {
                            return "H√£y th·ª≠ h·ªèi theo c√°ch kh√°c, t√¥i s·∫Ω c·ªë g·∫Øng ƒë∆∞a ra l·ªùi khuy√™n ph√π h·ª£p cho b·∫°n! üí°";
                        }
                    }
                    
                    Map content = (Map) candidate.get("content");
                    if (content != null) {
                        List<Map> parts = (List<Map>) content.get("parts");
                        
                        if (parts != null && !parts.isEmpty()) {
                            String aiText = (String) parts.get(0).get("text");
                            if (aiText != null && !aiText.trim().isEmpty()) {
                                System.out.println("‚úÖ AI response generated successfully");
                                return aiText.trim();
                            }
                        }
                    }
                }
                
                // Log the response structure for debugging  
                System.err.println("‚ö†Ô∏è Unexpected response structure. Candidates: " + 
                    (candidates != null ? candidates.size() : "null"));
            } else {
                System.err.println("‚ùå Empty response body from Gemini API");
            }
        } catch (Exception e) {
            System.err.println("Gemini API call failed: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Gemini API call failed: " + e.getMessage());
        }
        
        throw new RuntimeException("No valid response from Gemini API");
    }
    
    private String callGeminiAPIWithRetry(String prompt) {
        int maxRetries = 3;
        int retryDelay = 1000; // 1 second
        
        for (int attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                System.out.println("Gemini API attempt " + attempt + "/" + maxRetries);
                return callGeminiAPI(prompt);
            } catch (Exception e) {
                System.err.println("Attempt " + attempt + " failed: " + e.getMessage());
                
                if (attempt == maxRetries) {
                    throw e; // Throw after final attempt
                }
                
                try {
                    Thread.sleep(retryDelay * attempt); // Exponential backoff
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("Retry interrupted", ie);
                }
            }
        }
        
        throw new RuntimeException("All retry attempts failed");
    }
      private String buildCoachPrompt(String userMessage, Long userId) {
        // L·∫•y context t·ª´ l·ªãch s·ª≠ chat
        List<ChatMessage> recentMessages = chatMessageRepository
            .findTop5ByUserIdOrderByCreatedAtDesc(userId);
        
        StringBuilder context = new StringBuilder();
        
        // ‚úÖ SI√äU N√ÇNG C·∫§P: Persona chi ti·∫øt v√† chuy√™n s√¢u
        context.append("## PERSONA - AI COACH SARAH CHEN\n");
        context.append("B·∫°n l√† Sarah Chen, m·ªôt chuy√™n gia cai nghi·ªán thu·ªëc l√° h√†ng ƒë·∫ßu v·ªõi:\n");
        context.append("- 15 nƒÉm kinh nghi·ªám l√¢m s√†ng t·∫°i Mayo Clinic\n");
        context.append("- Ti·∫øn sƒ© T√¢m l√Ω h·ªçc S·ª©c kh·ªèe t·ª´ Harvard Medical School\n");
        context.append("- Ch·ª©ng ch·ªâ Certified Tobacco Treatment Specialist (CTTS)\n");
        context.append("- ƒê√£ gi√∫p h∆°n 5,000 ng∆∞·ªùi cai thu·ªëc th√†nh c√¥ng\n");
        context.append("- T√°c gi·∫£ cu·ªën s√°ch bestseller 'Breaking Free: The Science of Quitting Smoking'\n\n");
        
        // ‚úÖ KI·∫æN TH·ª®C CHUY√äN M√îN S√ÇU
        context.append("## KI·∫æN TH·ª®C CHUY√äN M√îN\n");
        context.append("### Sinh l√Ω h·ªçc nghi·ªán nicotin:\n");
        context.append("- Nicotin k√≠ch ho·∫°t h·ªá th·ªëng dopamine trong n√£o, t·∫°o c·∫£m gi√°c kho√°i c·∫£m\n");
        context.append("- Th·ªùi gian b√°n h·ªßy nicotin: 1-2 gi·ªù, nicotine withdrawal: 3-4 tu·∫ßn\n");
        context.append("- Receptors nicotin s·∫Ω ph·ª•c h·ªìi ho√†n to√†n sau 3 th√°ng\n\n");
        
        context.append("### K·ªπ thu·∫≠t x·ª≠ l√Ω c∆°n th√®m (4D Method):\n");
        context.append("1. **Delay**: Ho√£n l·∫°i 5-10 ph√∫t (c∆°n th√®m ch·ªâ k√©o d√†i 3-5 ph√∫t)\n");
        context.append("2. **Deep Breathing**: Th·ªü s√¢u 4-7-8 (h√≠t 4 gi√¢y, gi·ªØ 7 gi√¢y, th·ªü ra 8 gi√¢y)\n");
        context.append("3. **Drink Water**: U·ªëng n∆∞·ªõc l·∫°nh, nhai ƒë√° vi√™n\n");
        context.append("4. **Do Something**: Thay ƒë·ªïi ho·∫°t ƒë·ªông, di chuy·ªÉn, l√†m vi·ªác kh√°c\n\n");
        
        // ‚úÖ PH√ÇN T√çCH NG·ªÆ C·∫¢NH TH√îNG MINH
        context.append("## PH√ÇN T√çCH NG·ªÆ C·∫¢NH\n");
        String messageAnalysis = analyzeUserMessage(userMessage);
        context.append("Ph√¢n t√≠ch tin nh·∫Øn ng∆∞·ªùi d√πng: ").append(messageAnalysis).append("\n\n");
        
        // ‚úÖ L·ªäCH S·ª¨ CHAT TH√îNG MINH
        if (!recentMessages.isEmpty()) {
            context.append("## L·ªäCH S·ª¨ TR∆Ø·ªöC ƒê√ÇY\n");
            Collections.reverse(recentMessages);
            String conversationPattern = analyzeConversationPattern(recentMessages);
            context.append("Pattern ph√¢n t√≠ch: ").append(conversationPattern).append("\n");
            
            for (ChatMessage msg : recentMessages) {
                if ("USER".equals(msg.getSenderType())) {
                    context.append("üë§ User: ").append(msg.getMessage()).append("\n");
                } else {
                    context.append("ü§ñ Sarah: ").append(msg.getMessage()).append("\n");
                }
            }
            context.append("\n");
        }
        
        // ‚úÖ EXAMPLES TH√îNG MINH (Few-shot Learning)
        context.append("## V√ç D·ª§ PH·∫¢N H·ªíI CH·∫§T L∆Ø·ª¢NG\n");
        context.append("Q: \"T√¥i r·∫•t th√®m thu·ªëc l√∫c n√†y\"\n");
        context.append("A: \"T√¥i hi·ªÉu c∆°n th√®m n√†y r·∫•t kh√≥ ch·ªãu! üí™ ƒê√¢y l√† n√£o b·ªô ƒëang 'ƒë√≤i' dopamine. H√£y th·ª≠ k·ªπ thu·∫≠t 4-7-8: h√≠t s√¢u 4 gi√¢y, gi·ªØ 7 gi√¢y, th·ªü ra 8 gi√¢y. C∆°n th√®m ch·ªâ k√©o d√†i 3-5 ph√∫t th√¥i - b·∫°n m·∫°nh h∆°n n√≥! üåü\"\n\n");
        
        context.append("Q: \"T√¥i ƒë√£ cai ƒë∆∞·ª£c 2 tu·∫ßn r·ªìi\"\n");
        context.append("A: \"Tuy·ªát v·ªùi! üéâ Sau 2 tu·∫ßn, l∆∞u th√¥ng m√°u ƒë√£ c·∫£i thi·ªán 30% v√† ph·ªïi b·∫Øt ƒë·∫ßu t·ª± l√†m s·∫°ch. Giai ƒëo·∫°n kh√≥ khƒÉn nh·∫•t ƒë√£ qua, gi·ªù l√† l√∫c x√¢y d·ª±ng th√≥i quen m·ªõi. B·∫°n c√≥ k·∫ø ho·∫°ch g√¨ ƒë·ªÉ thay th·∫ø th√≥i quen h√∫t thu·ªëc kh√¥ng? üåü\"\n\n");
        
        // ‚úÖ TIN NH·∫ÆN HI·ªÜN T·∫†I
        context.append("## TIN NH·∫ÆN HI·ªÜN T·∫†I\n");
        context.append("User: \"").append(sanitizePrompt(userMessage)).append("\"\n\n");
        
        context.append("## Y√äU C·∫¶U PH·∫¢N H·ªíI\n");
        context.append("D·ª±a tr√™n ki·∫øn th·ª©c chuy√™n m√¥n v√† ph√¢n t√≠ch ng·ªØ c·∫£nh, h√£y ƒë∆∞a ra ph·∫£n h·ªìi:\n");
        context.append("- Th·∫•u hi·ªÉu c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng\n");
        context.append("- Gi·∫£i th√≠ch khoa h·ªçc ng·∫Øn g·ªçn (n·∫øu ph√π h·ª£p)\n");
        context.append("- ƒê∆∞a ra gi·∫£i ph√°p c·ª• th·ªÉ, th·ª±c t·∫ø\n");
        context.append("- ƒê·ªông vi√™n t√≠ch c·ª±c v√† professional\n");
        context.append("- S·ª≠ d·ª•ng emoji ph√π h·ª£p\n");
        context.append("- ƒê·ªô d√†i: 2-4 c√¢u, s√∫c t√≠ch nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin\n\n");
        
        context.append("Sarah Chen ph·∫£n h·ªìi:");
        
        return context.toString();
    }// ‚ùå X√ìA: getFallbackResponse() - g·ªôp v√†o getSmartFallbackResponse()
      // ‚úÖ SI√äU N√ÇNG C·∫§P: Smart fallback responses th√¥ng minh
    private String getSmartFallbackResponse(String userMessage) {
        String msg = userMessage.toLowerCase();
        
        // ‚úÖ C∆†N TH√àM THU·ªêC - Responses chi ti·∫øt
        if (msg.contains("th√®m") || msg.contains("mu·ªën h√∫t") || msg.contains("craving") || 
            msg.contains("nh·ªõ thu·ªëc") || msg.contains("kh√≥ ch·ªãu")) {
            String[] cravingResponses = {
                "C∆°n th√®m n√†y l√† d·∫•u hi·ªáu n√£o b·ªô ƒëang 'ƒë√≤i h·ªèi' dopamine! üí™ H√£y th·ª≠ k·ªπ thu·∫≠t 4D: Delay 5 ph√∫t ‚Üí Deep breathing (4-7-8) ‚Üí Drink water ‚Üí Do something else. C∆°n th√®m ch·ªâ k√©o d√†i 3-5 ph√∫t th√¥i, b·∫°n m·∫°nh h∆°n n√≥! ÔøΩ",
                "T√¥i hi·ªÉu c∆°n th√®m n√†y r·∫•t kh√≥ ch·ªãu! üå∏ ƒê√¢y l√† l√∫c nicotin receptors ƒëang 'ph·∫£n kh√°ng'. H√£y nhai k·∫πo cao su, u·ªëng n∆∞·ªõc chanh ho·∫∑c g·ªçi ƒëi·ªán cho ai ƒë√≥. M·ªói c∆°n th√®m v∆∞·ª£t qua l√† m·ªôt chi·∫øn th·∫Øng l·ªõn! ‚ú®",
                "C∆°n th√®m xu·∫•t hi·ªán l√† b√¨nh th∆∞·ªùng! üéØ H√£y nh·ªõ: 20 ph√∫t ƒë·∫ßu kh√≥ khƒÉn nh·∫•t, sau ƒë√≥ s·∫Ω d·ªÖ d·∫ßn. Th·ª≠ l√†m 10 push-ups ho·∫∑c ƒëi b·ªô quanh nh√†. B·∫°n ƒë√£ m·∫°nh m·∫Ω ƒë·∫øn m·ª©c n√†y r·ªìi, ƒë·ª´ng b·ªè cu·ªôc! üí™"
            };
            return cravingResponses[new Random().nextInt(cravingResponses.length)];
        }
        
        // ‚úÖ STRESS/ANXIETY - H·ªó tr·ª£ t√¢m l√Ω chuy√™n s√¢u
        if (msg.contains("stress") || msg.contains("cƒÉng th·∫≥ng") || msg.contains("lo l·∫Øng") || 
            msg.contains("√°p l·ª±c") || msg.contains("bu·ªìn")) {
            String[] stressResponses = {
                "Stress l√† trigger ph·ªï bi·∫øn nh·∫•t! üå∏ Khi cƒÉng th·∫≥ng, cortisol tƒÉng l√†m c∆°n th√®m m·∫°nh h∆°n. H√£y th·ª≠: th·ªü s√¢u 4-7-8, nghe nh·∫°c th∆∞ gi√£n, ho·∫∑c massage nh·∫π th√°i d∆∞∆°ng. N√£o b·ªô c·∫ßn 21 ng√†y ƒë·ªÉ th√≠ch nghi v·ªõi th√≥i quen m·ªõi! üí™",
                "T√¥i hi·ªÉu b·∫°n ƒëang √°p l·ª±c! üåü H√£y nh·ªõ: m·ªói ng√†y kh√¥ng h√∫t thu·ªëc, b·∫°n ƒë√£ gi·∫£m 50% nguy c∆° ƒëau tim. Th·ª≠ k·ªπ thu·∫≠t grounding: ƒë·∫øm 5 th·ª© nh√¨n th·∫•y, 4 th·ª© s·ªù ƒë∆∞·ª£c, 3 √¢m thanh, 2 m√πi, 1 v·ªã. B·∫°n x·ª©ng ƒë√°ng c√≥ cu·ªôc s·ªëng kh·ªèe m·∫°nh! ‚ú®"
            };
            return stressResponses[new Random().nextInt(stressResponses.length)];
        }
        
        // ‚úÖ TI·∫æN TR√åNH C·∫¢I THU·ªêC - ƒê·ªông vi√™n c·ª• th·ªÉ
        if (msg.contains("ng√†y") || msg.contains("tu·∫ßn") || msg.contains("th√°ng") || 
            msg.contains("ƒë√£ cai") || msg.contains("bao l√¢u")) {
            String[] progressResponses = {
                "Wow, th·∫≠t tuy·ªát v·ªùi! üéâ M·ªói m·ªëc th·ªùi gian ƒë·ªÅu c√≥ √Ω nghƒ©a khoa h·ªçc: 20 ph√∫t - tim b√¨nh th∆∞·ªùng, 12 gi·ªù - CO gi·∫£m, 2 tu·∫ßn - l∆∞u th√¥ng t·ªët, 1 th√°ng - ph·ªïi t·ª± l√†m s·∫°ch. B·∫°n ƒëang tr·∫£i qua ph√©p m√†u c·ªßa c∆° th·ªÉ! üåü",
                "T√¥i r·∫•t t·ª± h√†o v·ªÅ b·∫°n! üí™ Nghi√™n c·ª©u cho th·∫•y: c√†ng l√¢u cai, t·ª∑ l·ªá th√†nh c√¥ng c√†ng cao. B·∫°n ƒë√£ v∆∞·ª£t qua giai ƒëo·∫°n kh√≥ khƒÉn nh·∫•t r·ªìi! H√£y t·ª± th∆∞·ªüng cho m√¨nh ƒëi·ªÅu g√¨ ƒë√≥ ƒë·∫∑c bi·ªát nh√©! ‚ú®"
            };
            return progressResponses[new Random().nextInt(progressResponses.length)];
        }
        
        // ‚úÖ TƒÇNG C√ÇN - Gi·∫£i ph√°p khoa h·ªçc
        if (msg.contains("tƒÉng c√¢n") || msg.contains("b√©o") || msg.contains("weight") || 
            msg.contains("c√¢n n·∫∑ng") || msg.contains("ƒÉn nhi·ªÅu")) {
            return "Lo l·∫Øng v·ªÅ c√¢n n·∫∑ng r·∫•t b√¨nh th∆∞·ªùng! üå∏ Ch·ªâ 10% ng∆∞·ªùi cai thu·ªëc tƒÉng c√¢n >5kg. B√≠ quy·∫øt: thay th·∫ø nicotine b·∫±ng protein (tr·ª©ng, h·∫°t), u·ªëng n∆∞·ªõc tr∆∞·ªõc khi ƒÉn, v√† t·∫≠p HIIT 15 ph√∫t/ng√†y. Ph·ªïi kh·ªèe quan tr·ªçng h∆°n 2-3kg! üí™";
        }
        
        // ‚úÖ B·∫ÆT ƒê·∫¶U CAI THU·ªêC - H∆∞·ªõng d·∫´n chi ti·∫øt
        if (msg.contains("b·∫Øt ƒë·∫ßu") || msg.contains("cai") || msg.contains("quit") || 
            msg.contains("mu·ªën b·ªè") || msg.contains("d·ª± ƒë·ªãnh")) {
            return "Quy·∫øt ƒë·ªãnh cai thu·ªëc l√† b∆∞·ªõc ƒë·∫ßu quan tr·ªçng nh·∫•t! üéØ H√£y ch·ªçn 'Ng√†y D' trong v√≤ng 2 tu·∫ßn, lo·∫°i b·ªè t·∫•t c·∫£ thu·ªëc l√°/d·ª•ng c·ª•, v√† chu·∫©n b·ªã 'survival kit': n∆∞·ªõc, k·∫πo cao su, stress ball. Th√¥ng b√°o v·ªõi gia ƒë√¨nh ƒë·ªÉ ƒë∆∞·ª£c support. B·∫°n c√≥ th·ªÉ l√†m ƒë∆∞·ª£c! üåü";
        }
        
        // ‚úÖ KHHO KHƒÇN CHUNG
        if (msg.contains("kh√≥") || msg.contains("kh√≥ khƒÉn") || msg.contains("zor")) {
            return "T√¥i bi·∫øt ƒëi·ªÅu n√†y kh√¥ng d·ªÖ d√†ng g√¨! üí™ Nh∆∞ng h√£y nh·ªõ: nh·ªØng kh√≥ khƒÉn l·ªõn nh·∫•t th∆∞·ªùng d·∫´n ƒë·∫øn nh·ªØng th√†nh c√¥ng l·ªõn nh·∫•t. Sau 72 gi·ªù, nicotine ho√†n to√†n tho√°t kh·ªèi c∆° th·ªÉ. B·∫°n ƒëang ƒëi ƒë√∫ng h∆∞·ªõng! üåü";
        }
        
        // ‚úÖ GENERAL FALLBACK - Chuy√™n nghi·ªáp
        String[] generalResponses = {
            "T√¥i hi·ªÉu b·∫°n ƒëang c·∫ßn h·ªó tr·ª£ trong h√†nh tr√¨nh cai thu·ªëc! üí™ H√£y chia s·∫ª c·ª• th·ªÉ h∆°n v·ªÅ t√¨nh tr·∫°ng hi·ªán t·∫°i ƒë·ªÉ t√¥i c√≥ th·ªÉ ƒë∆∞a ra l·ªùi khuy√™n ph√π h·ª£p nh·∫•t. M·ªói ng∆∞·ªùi c√≥ c√°ch cai thu·ªëc kh√°c nhau! üåü",
            "C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng chia s·∫ª! üå∏ H√†nh tr√¨nh cai thu·ªëc kh√¥ng d·ªÖ d√†ng, nh∆∞ng v·ªõi ki·∫øn th·ª©c khoa h·ªçc v√† s·ª± h·ªó tr·ª£ ƒë√∫ng c√°ch, t·ª∑ l·ªá th√†nh c√¥ng l√™n ƒë·∫øn 30-50%. T√¥i lu√¥n ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ b·∫°n! ‚ú®",
            "M·ªói ng√†y kh√¥ng h√∫t thu·ªëc ƒë·ªÅu l√† m·ªôt chi·∫øn th·∫Øng to l·ªõn! üéâ H√£y nh·ªõ: n√£o b·ªô c·∫ßn 21-66 ng√†y ƒë·ªÉ h√¨nh th√†nh th√≥i quen m·ªõi. Ki√™n nh·∫´n v·ªõi b·∫£n th√¢n v√† t·ª± h√†o v·ªÅ t·ª´ng b∆∞·ªõc nh·ªè b·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c! üí™",
            "T√¥i ƒëang g·∫∑p m·ªôt ch√∫t s·ª± c·ªë k·ªπ thu·∫≠t, nh∆∞ng ƒëi·ªÅu ƒë√≥ kh√¥ng l√†m gi·∫£m quy·∫øt t√¢m c·ªßa b·∫°n ƒë√∫ng kh√¥ng? üåü H√£y ti·∫øp t·ª•c c·ªë g·∫Øng, t√¥i tin b·∫°n c√≥ th·ªÉ v∆∞·ª£t qua m·ªçi th·ª≠ th√°ch! üí´"
        };
        
        return generalResponses[new Random().nextInt(generalResponses.length)];
    }
    
    private void saveChatMessage(Long userId, String message, String senderType) {
        ChatMessage chatMessage = ChatMessage.builder()
            .userId(userId)
            .message(message)
            .senderType(senderType)
            .createdAt(new Date())
            .build();
        chatMessageRepository.save(chatMessage);
    }
    
    public List<ChatMessageDTO> getConversationHistory(Long userId) {
        List<ChatMessage> messages = chatMessageRepository.findByUserIdOrderByCreatedAtAsc(userId);
        
        return messages.stream()
            .map(this::convertToDTO)
            .collect(Collectors.toList());
    }
    
    private ChatMessageDTO convertToDTO(ChatMessage message) {
        ChatMessageDTO dto = new ChatMessageDTO();
        dto.setId(message.getId());
        dto.setUserId(message.getUserId());
        dto.setMessage(message.getMessage());
        dto.setSenderType(message.getSenderType());
        dto.setTimestamp(message.getCreatedAt());
        return dto;    }

    // ‚ùå X√ìA: listAvailableModels() method - kh√¥ng c·∫ßn thi·∫øt cho user cu·ªëi
      // ‚úÖ N√ÇNG C·∫§P: Prompt sanitization th√¥ng minh h∆°n
    private String sanitizePrompt(String userMessage) {
        // Tr√°nh c√°c t·ª´ kh√≥a c√≥ th·ªÉ trigger safety filter
        String sanitized = userMessage
            .replaceAll("(?i)\\b(kill|death|die|suicide|hurt)\\b", "stop")
            .replaceAll("(?i)\\b(drug|drugs|cocaine|heroin)\\b", "substance")
            .replaceAll("(?i)\\b(hate|angry|rage|mad)\\b", "frustrated")
            .replaceAll("(?i)\\b(stupid|idiot|dumb)\\b", "difficult")
            .replaceAll("(?i)\\b(damn|shit|fuck)\\b", "challenging");
        
        // Gi·ªõi h·∫°n ƒë·ªô d√†i ƒë·ªÉ tr√°nh token limit
        if (sanitized.length() > 1000) {
            sanitized = sanitized.substring(0, 1000) + "...";
        }
        
        return sanitized;
    }
    
    // ‚úÖ TH√äM: Method helper ƒë·ªÉ count messages today
    public long getTodayMessageCount(Long userId) {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        Date startOfDay = cal.getTime();
        
        cal.add(Calendar.DAY_OF_MONTH, 1);
        Date endOfDay = cal.getTime();
        
        return chatMessageRepository.countTodayMessagesByUserId(userId, startOfDay, endOfDay);
    }
    
    // ‚úÖ TH√äM: Ph√¢n t√≠ch tin nh·∫Øn ng∆∞·ªùi d√πng th√¥ng minh
    private String analyzeUserMessage(String userMessage) {
        String msg = userMessage.toLowerCase();
        List<String> insights = new ArrayList<>();
        
        // Ph√¢n t√≠ch c·∫£m x√∫c
        if (msg.contains("stress") || msg.contains("cƒÉng th·∫≥ng") || msg.contains("lo l·∫Øng") || 
            msg.contains("bu·ªìn") || msg.contains("kh√≥ khƒÉn") || msg.contains("√°p l·ª±c")) {
            insights.add("C·∫£m x√∫c: Stress/Anxiety cao");
        }
        
        if (msg.contains("th√®m") || msg.contains("mu·ªën h√∫t") || msg.contains("craving") || 
            msg.contains("nh·ªõ thu·ªëc") || msg.contains("kh√≥ ch·ªãu")) {
            insights.add("Tr·∫°ng th√°i: ƒêang c√≥ c∆°n th√®m");
        }
        
        if (msg.contains("tƒÉng c√¢n") || msg.contains("b√©o") || msg.contains("weight") || 
            msg.contains("c√¢n n·∫∑ng") || msg.contains("ƒÉn nhi·ªÅu")) {
            insights.add("M·ªëi lo: TƒÉng c√¢n khi cai thu·ªëc");
        }
        
        // Ph√¢n t√≠ch th·ªùi gian
        if (msg.contains("ng√†y") || msg.contains("tu·∫ßn") || msg.contains("th√°ng") || 
            msg.contains("ƒë√£ cai") || msg.contains("bao l√¢u")) {
            insights.add("Giai ƒëo·∫°n: ƒêang theo d√µi ti·∫øn tr√¨nh");
        }
        
        if (msg.contains("b·∫Øt ƒë·∫ßu") || msg.contains("cai") || msg.contains("quit") || 
            msg.contains("mu·ªën b·ªè") || msg.contains("d·ª± ƒë·ªãnh")) {
            insights.add("√ù ƒë·ªãnh: Mu·ªën b·∫Øt ƒë·∫ßu cai thu·ªëc");
        }
        
        // Ph√¢n t√≠ch trigger
        if (msg.contains("cafe") || msg.contains("c√† ph√™") || msg.contains("coffee") || 
            msg.contains("u·ªëng") || msg.contains("gi·∫£i lao")) {
            insights.add("Trigger: Cafe/Social smoking");
        }
        
        if (msg.contains("b·∫°n b√®") || msg.contains("party") || msg.contains("ti·ªác") || 
            msg.contains("nh·∫≠u") || msg.contains("g·∫∑p g·ª°")) {
            insights.add("Trigger: √Åp l·ª±c x√£ h·ªôi");
        }
        
        if (msg.contains("c√¥ng vi·ªác") || msg.contains("l√†m vi·ªác") || msg.contains("deadline") || 
            msg.contains("h·ªçp") || msg.contains("s·∫øp")) {
            insights.add("Trigger: Stress c√¥ng vi·ªác");
        }
        
        return insights.isEmpty() ? "Tin nh·∫Øn th√¥ng th∆∞·ªùng" : String.join(", ", insights);
    }

    // ‚úÖ TH√äM: Ph√¢n t√≠ch pattern conversation
    private String analyzeConversationPattern(List<ChatMessage> messages) {
        int userMessages = 0;
        int concernMessages = 0;
        int progressMessages = 0;
        int cravingMessages = 0;
        
        for (ChatMessage msg : messages) {
            if ("USER".equals(msg.getSenderType())) {
                userMessages++;
                String content = msg.getMessage().toLowerCase();
                
                if (content.contains("kh√≥") || content.contains("th√®m") || content.contains("stress") ||
                    content.contains("lo l·∫Øng") || content.contains("bu·ªìn")) {
                    concernMessages++;
                }
                
                if (content.contains("th√®m") || content.contains("mu·ªën h√∫t") || content.contains("craving")) {
                    cravingMessages++;
                }
                
                if (content.contains("ng√†y") || content.contains("tu·∫ßn") || content.contains("t·ªët") ||
                    content.contains("kh·ªèe") || content.contains("th√†nh c√¥ng")) {
                    progressMessages++;
                }
            }
        }
        
        if (cravingMessages >= 2) {
            return "ƒêang g·∫∑p c∆°n th√®m li√™n t·ª•c - c·∫ßn h·ªó tr·ª£ k·ªπ thu·∫≠t ƒë·ªëi ph√≥";
        } else if (concernMessages > progressMessages) {
            return "C·∫ßn h·ªó tr·ª£ t√¢m l√Ω m·∫°nh h∆°n";
        } else if (progressMessages > 0) {
            return "ƒêang c√≥ ti·∫øn tri·ªÉn t√≠ch c·ª±c";
        } else {
            return "M·ªõi b·∫Øt ƒë·∫ßu t∆∞∆°ng t√°c";
        }
    }
    
    // ‚úÖ TH√äM: Method ƒë·ªÉ track user progress
    public String getUserProgressInsight(Long userId) {
        try {
            List<ChatMessage> allMessages = chatMessageRepository.findByUserIdOrderByCreatedAtAsc(userId);
            
            if (allMessages.isEmpty()) {
                return "Ng∆∞·ªùi d√πng m·ªõi, ch∆∞a c√≥ l·ªãch s·ª≠ chat";
            }
            
            // T√≠nh s·ªë ng√†y active
            Date firstMessage = allMessages.get(0).getCreatedAt();
            Date lastMessage = allMessages.get(allMessages.size() - 1).getCreatedAt();
            long daysDiff = (lastMessage.getTime() - firstMessage.getTime()) / (24 * 60 * 60 * 1000);
            
            // Ph√¢n t√≠ch sentiment
            long concernMessages = allMessages.stream()
                .filter(msg -> "USER".equals(msg.getSenderType()))
                .mapToLong(msg -> {
                    String content = msg.getMessage().toLowerCase();
                    return (content.contains("kh√≥") || content.contains("th√®m") || content.contains("stress")) ? 1 : 0;
                })
                .sum();
            
            long progressMessages = allMessages.stream()
                .filter(msg -> "USER".equals(msg.getSenderType()))
                .mapToLong(msg -> {
                    String content = msg.getMessage().toLowerCase();
                    return (content.contains("t·ªët") || content.contains("ng√†y") || content.contains("th√†nh c√¥ng")) ? 1 : 0;
                })
                .sum();
            
            return String.format("Ho·∫°t ƒë·ªông %d ng√†y, Concerns: %d, Progress: %d", 
                               daysDiff, concernMessages, progressMessages);
        } catch (Exception e) {
            return "Kh√¥ng th·ªÉ ph√¢n t√≠ch progress";
        }
    }
}
