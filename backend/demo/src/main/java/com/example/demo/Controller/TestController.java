package com.example.demo.Controller;

import com.google.firebase.FirebaseApp;
import com.google.firebase.auth.FirebaseAuth;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/test")
@CrossOrigin(origins = "*")
public class TestController {

    @GetMapping("/health")
    public ResponseEntity<String> healthCheck() {
        return ResponseEntity.ok("Backend is running! üöÄ");
    }

    @GetMapping("/firebase")
    public ResponseEntity<String> testFirebase() {
        try {
            // Ki·ªÉm tra FirebaseApp c√≥ ƒë∆∞·ª£c kh·ªüi t·∫°o kh√¥ng
            if (FirebaseApp.getApps().isEmpty()) {
                return ResponseEntity.ok("‚ùå Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
            }
            
            // L·∫•y FirebaseApp default
            FirebaseApp app = FirebaseApp.getInstance();
            String projectId = app.getOptions().getProjectId();
            
            // Test FirebaseAuth
            FirebaseAuth auth = FirebaseAuth.getInstance();
            
            return ResponseEntity.ok("‚úÖ Firebase ho·∫°t ƒë·ªông! Project ID: " + projectId);
            
        } catch (Exception e) {
            return ResponseEntity.ok("‚ùå L·ªói Firebase: " + e.getMessage());
        }
    }
    
    @PostMapping("/verify-token")
    public ResponseEntity<String> verifyToken(@RequestHeader("Authorization") String token) {
        try {
            // B·ªè "Bearer " prefix
            String idToken = token.replace("Bearer ", "");
            
            // Verify token
            var decodedToken = FirebaseAuth.getInstance().verifyIdToken(idToken);
            String uid = decodedToken.getUid();
            
            return ResponseEntity.ok("‚úÖ Token h·ª£p l·ªá! UID: " + uid);
        } catch (Exception e) {
            return ResponseEntity.ok("‚ùå Token kh√¥ng h·ª£p l·ªá: " + e.getMessage());
        }
    }
}