package com.example.demo.service.AdminServicePackage.user;

import com.example.demo.DTO.AdminUserDTO;
import com.example.demo.DTO.UserProfileDTO;
import com.example.demo.entity.Role;
import com.example.demo.entity.User;
import com.example.demo.entity.UserProfile;
import com.example.demo.Repo.UserRepo;
import com.example.demo.Repo.UserProfileRepo;
import com.example.demo.Repo.PlanRepo;
import com.example.demo.service.AdminServicePackage.dashboard.CalculatorUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class AdminUserService {

    @Autowired private UserRepo userRepo;
    @Autowired private UserProfileRepo userProfileRepo;
    @Autowired private PlanRepo planRepo;
    @Autowired private CalculatorUtils calculatorUtils;

    // ============================================================================
    // üìå 1. L·∫§Y DANH S√ÅCH USER CHO ADMIN V√Ä SUPER_ADMIN
    // ============================================================================

    /**
     * ‚úÖ C·∫£ ADMIN v√† SUPER_ADMIN ƒë·ªÅu ƒë∆∞·ª£c xem danh s√°ch ng∆∞·ªùi d√πng th∆∞·ªùng (USER)
     */
    public List<AdminUserDTO> getAllUsersVisibleToAdmin(int currentAdminId) {

        // L·∫•y admin hi·ªán t·∫°i t·ª´ ID truy·ªÅn l√™n
        User current = userRepo.findById(currentAdminId)
                .orElseThrow(() -> new RuntimeException("Current admin not found"));

        Role role = current.getRole();
        if (role == null) {
            throw new RuntimeException("User has no role assigned");
        }

        // Ch·∫∑n ng∆∞·ªùi kh√¥ng ph·∫£i ADMIN ho·∫∑c SUPER_ADMIN
        if (role != Role.ADMIN && role != Role.SUPER_ADMIN) {
            throw new RuntimeException("Access denied: unsupported role");
        }

        // L·∫•y to√†n b·ªô user c√≥ role l√† USER
        List<User> users = userRepo.findByRole(Role.USER);

        // Convert sang DTO ƒë·ªÉ g·ª≠i cho frontend
        return users.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    // ============================================================================
    // üìå 2. L·∫§Y DANH S√ÅCH ADMIN (ch·ªâ d√†nh cho SUPER_ADMIN)
    // ============================================================================

    /**
     * ‚úÖ Ch·ªâ SUPER_ADMIN ƒë∆∞·ª£c xem danh s√°ch ADMIN (lo·∫°i b·ªè SUPER_ADMIN kh√°c)
     */
    public List<AdminUserDTO> getAllAdmins(int currentAdminId) {
        User current = userRepo.findById(currentAdminId)
                .orElseThrow(() -> new RuntimeException("Admin not found"));

        // Ch·∫∑n n·∫øu kh√¥ng ph·∫£i SUPER_ADMIN
        if (current.getRole() != Role.SUPER_ADMIN) {
            throw new RuntimeException("Permission denied");
        }

        // L·∫•y t·∫•t c·∫£ user c√≥ role ADMIN (lo·∫°i tr·ª´ SUPER_ADMIN)
        List<User> adminUsers = userRepo.findByRole(Role.ADMIN);

        return adminUsers.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    // ============================================================================
    // üìå 3. XEM CHI TI·∫æT TH√îNG TIN C√Å NH√ÇN C·ª¶A USER (trong modal)
    // ============================================================================

    /**
     * ‚úÖ Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt h·ªì s∆° c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng (userId)
     * ‚Üí G·ªìm c·∫£ profile v√† user (id, name,‚Ä¶)
     */
    public UserProfileDTO getUserProfileByUserId(Integer userId) {
        Optional<User> userOpt = userRepo.findById(userId);
        if (userOpt.isEmpty()) return null;

        User user = userOpt.get();

        Optional<UserProfile> profileOpt = userProfileRepo.findByUserId(userId);
        if (profileOpt.isEmpty()) return null;

        UserProfile profile = profileOpt.get();

        return new UserProfileDTO(
                user.getName(),
                profile.getPhone(),
                profile.getBirthdate(),
                profile.getGender(),
                profile.getBio(),
                profile.getSmokingAge(),
                profile.getYearsSmoked(),
                profile.getOccupation(),
                profile.getHealthStatus(),
                user.getId()
        );
    }

    // ============================================================================
    // üìå 4. H√ÄM D√ôNG CHUNG ƒê·ªÇ CONVERT USER ‚Üí AdminUserDTO
    // ============================================================================

    /**
     * ‚úÖ Chuy·ªÉn entity User sang DTO AdminUserDTO ƒë·ªÉ hi·ªÉn th·ªã l√™n b·∫£ng qu·∫£n l√Ω
     * ‚Üí G·ªìm: id, t√™n, email, avatar, phone, role, v√† s·ªë ng√†y kh√¥ng h√∫t thu·ªëc
     */
    private AdminUserDTO convertToDTO(User user) {

        // L·∫•y s·ªë ƒëi·ªán tho·∫°i t·ª´ b·∫£ng user_profile (n·∫øu c√≥)
        String phone = userProfileRepo.findByUserId(user.getId())
                .map(UserProfile::getPhone)
                .orElse("");

        // T√≠nh s·ªë ng√†y kh√¥ng h√∫t thu·ªëc t·ª´ Plan (n·∫øu c√≥)
        long daysSmokeFree = planRepo.findByUserId(user.getId())
                .map(calculatorUtils::calculateDaysSmokeFree)
                .orElse(0L);

        return new AdminUserDTO(
                user.getId(),
                user.getName(),
                user.getEmail(),
                phone,
                user.getRole(),
                user.getAvatarUrl()
        );
    }
}
