package com.example.demo.service.AdminServicePackage.dashboard;

import com.example.demo.Repo.PlanRepo;
import com.example.demo.entity.Plan;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;

// ‚úÖ Service d√πng ƒë·ªÉ t√≠nh ph√¢n b·ªë ti·∫øn tr√¨nh cai thu·ªëc c·ªßa ng∆∞·ªùi d√πng (theo m·ªëc th·ªùi gian)
@Service
public class UserProgressDistributionService {

    // Inject repository ƒë·ªÉ l·∫•y danh s√°ch k·∫ø ho·∫°ch c·ªßa ng∆∞·ªùi d√πng
    @Autowired
    private PlanRepo planRepo;

    /**
     * ‚úÖ Tr·∫£ v·ªÅ ph·∫ßn trƒÉm ng∆∞·ªùi d√πng ƒë·∫°t t·ª´ng m·ªëc ti·∫øn tr√¨nh:
     * - Trong tu·∫ßn ƒë·∫ßu
     * - Trong th√°ng ƒë·∫ßu
     * - Cai ƒë∆∞·ª£c t·ª´ 3 th√°ng tr·ªü l√™n
     */
    public ProgressDistribution getProgressDistribution() {
        List<Plan> plans = planRepo.findAll(); // L·∫•y to√†n b·ªô plan (k·∫ø ho·∫°ch b·ªè thu·ªëc)

        int total = 0;               // T·ªïng s·ªë ng∆∞·ªùi c√≥ quitDate h·ª£p l·ªá
        int firstWeek = 0;           // Ng∆∞·ªùi m·ªõi b·ªè thu·ªëc trong 7 ng√†y ƒë·∫ßu
        int firstMonth = 0;          // Ng∆∞·ªùi cai thu·ªëc ƒë∆∞·ª£c h∆°n 1 tu·∫ßn nh∆∞ng ch∆∞a qu√° 1 th√°ng
        int threeMonthsOrMore = 0;   // Ng∆∞·ªùi b·ªè thu·ªëc t·ª´ 3 th√°ng tr·ªü l√™n

        LocalDate today = LocalDate.now(); // Ng√†y hi·ªán t·∫°i

        // Duy·ªát qua t·∫•t c·∫£ c√°c plan ƒë·ªÉ t√≠nh s·ªë ng√†y ƒë√£ cai c·ªßa t·ª´ng ng∆∞·ªùi
        for (Plan plan : plans) {
            LocalDate quitDate = plan.getQuitDate();

            // N·∫øu kh√¥ng c√≥ ng√†y b·ªè thu·ªëc ‚Üí b·ªè qua
            if (quitDate == null) continue;

            long days = ChronoUnit.DAYS.between(quitDate, today); // S·ªë ng√†y t·ª´ khi b·ªè thu·ªëc ƒë·∫øn nay

            // N·∫øu quitDate ·ªü t∆∞∆°ng lai ‚Üí b·ªè qua
            if (days < 0) continue;

            total++; // User h·ª£p l·ªá

            // ‚úÖ Ph√¢n lo·∫°i theo m·ªëc th·ªùi gian
            if (days <= 7) {
                firstWeek++; // Trong tu·∫ßn ƒë·∫ßu
            } else if (days <= 30) {
                firstMonth++; // Trong th√°ng ƒë·∫ßu (nh∆∞ng qu√° 7 ng√†y)
            } else if (days >= 90) {
                threeMonthsOrMore++; // Tr√™n 3 th√°ng
            }
        }

        // ‚úÖ T√≠nh ph·∫ßn trƒÉm cho t·ª´ng nh√≥m, l√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
        double weekPercent = total == 0 ? 0 : Math.round((double) firstWeek / total * 1000) / 10.0;
        double monthPercent = total == 0 ? 0 : Math.round((double) firstMonth / total * 1000) / 10.0;
        double threeMonthPercent = total == 0 ? 0 : Math.round((double) threeMonthsOrMore / total * 1000) / 10.0;

        // ‚úÖ Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng ch·ª©a 3 k·∫øt qu·∫£ ph·∫ßn trƒÉm
        return new ProgressDistribution(weekPercent, monthPercent, threeMonthPercent);
    }

    /**
     * ‚úÖ Inner class d·∫°ng record ƒë·ªÉ gom k·∫øt qu·∫£ ph√¢n b·ªë th√†nh m·ªôt object
     * üì¶ D√πng l√†m DTO tr·∫£ v·ªÅ cho Dashboard
     */
    public record ProgressDistribution(
            double firstWeekPercent,
            double firstMonthPercent,
            double threeMonthsOrMorePercent
    ) {}
}
