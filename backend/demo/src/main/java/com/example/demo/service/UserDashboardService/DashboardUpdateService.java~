package com.example.demo.service.UserDashboardService;

import com.example.demo.DTO.DashboardDTO;
import com.example.demo.Repo.DashboardRepo;
import com.example.demo.Repo.PlanRepo;
import com.example.demo.Repo.TrackingRepo;
import com.example.demo.Repo.UserRepo;
import com.example.demo.entity.Dashboard;
import com.example.demo.entity.Plan;
import com.example.demo.entity.Tracking;
import com.example.demo.entity.User;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class DashboardUpdateService {

    private final DashboardRepo dashboardRepo;
    private final PlanRepo planRepo;
    private final TrackingRepo trackingRepo;
    private final UserRepo userRepo;
    private final DashboardMetricsService dashboardMetricsService;
    private final MilestoneService milestoneService;
    private final SimpMessagingTemplate messagingTemplate;

    public ResponseEntity<DashboardDTO> getOrUpdateDashboard(Integer userId) {

        //‚û°Ô∏è T√¨m User xem c√≥ t·ªìn tai ch∆∞a
        Optional<User> userOpt = userRepo.findById(userId);
        if (userOpt.isEmpty()) return ResponseEntity.notFound().build();

        //‚û°Ô∏è T√¨m Plan xem c√≥ t·ªìn tai ch∆∞a
        Optional<Plan> planOpt = planRepo.findByUserId(String.valueOf(userId));
        if (planOpt.isEmpty()) return ResponseEntity.notFound().build();


        //‚û°Ô∏è Khi Plan c√≥ th√¨ n√≥ s·∫Ω ch·∫°y ti·∫øp
        //‚û°Ô∏è L·∫•y quitedate xem user ƒë√£ l·∫≠p k·∫ø ho·∫°ch ·ªü plan ch∆∞a
        Plan plan = planOpt.get();
        LocalDate quitDate = plan.getQuitDate();
        int cigarettesPerDay = plan.getCigarettesPerDay();

        //‚û°Ô∏è Ch·∫°y t·ªõi ƒë√¢y n√≥ s·∫Ω ki·ªÉm tra quitDate c√≥ null ko, n·∫øu null th√¨ tr·∫£ v·ªÅ l·ªói v√† k·∫øt th√∫c.
        if (quitDate == null) {
            return ResponseEntity.badRequest().body(DashboardDTO.builder()
                    .userId(userId)
                    .nextMilestone("No quit date set")
                    .remainingDaysToMilestone(0)
                    .cigarettesPerDay(cigarettesPerDay)
                    .quitDate(null)
                    .topTriggers(Collections.emptyList())
                    .build());
        }


        //‚û°Ô∏è L·∫•y th·ªùi gian hi·ªán t·∫°i
        LocalDate today = LocalDate.now();

        //‚û°Ô∏è Truy·ªÅn th·ªùi gian hi·ªán t·∫°i v√†o findByUserIdAndRecordedDate ƒë·ªÉ l·∫•y dashboard v·ªõi t·ªùi gian l√† h√¥m nay
        Optional<Dashboard> existing = dashboardRepo.findByUserIdAndRecordedDate(userId, today);
        List<Tracking> trackings = trackingRepo.findByUserId(userId);

        //‚û°Ô∏è N·∫øu h√¥m nay c√≥ d·ªØ li·ªáu th√¨ n√≥ s·∫Ω tr·∫£ v·ªÅ dashboard l·∫•y ƒë∆∞·ª£c ƒë√≥ th√¥ng qua createDTOFromExisting
        if (existing.isPresent()) {
            Dashboard dashboard = existing.get();
            return ResponseEntity.ok(dashboardMetricsService.createDTOFromExisting(dashboard, plan, userId));
        }

        //‚û°Ô∏è N·∫øu h√¥m nay ch∆∞a c√≥ d·ªØ li·ªáu th√¨ n√≥ s·∫Ω t√≠nh to√°n th·ªß c√¥ng v√†  tr·∫£ v·ªÅ th√¥ng qua updateDashboard
        DashboardDTO dto = updateDashboard(userId, plan, trackings, quitDate, cigarettesPerDay);
        return ResponseEntity.ok(dto);
    }


    //‚û°Ô∏è C·∫≠p nh·∫≠t l·∫°i Dashboard cho m·ªôt ng∆∞·ªùi d√πng nh·∫•t ƒë·ªãnh
    public void forceUpdateDashboard(Integer userId) {

        //T√¨m Plan t∆∞∆°ng ·ª©ng v·ªõi userId
        //N·∫øu kh√¥ng c√≥ Plan (ng∆∞·ªùi d√πng ch∆∞a thi·∫øt l·∫≠p k·∫ø ho·∫°ch cai thu·ªëc) ‚Üí k·∫øt th√∫c lu√¥n
        Optional<Plan> planOpt = planRepo.findByUserId(String.valueOf(userId));
        if (planOpt.isEmpty()) return;


        //L·∫•y quitDate (ng√†y b·∫Øt ƒë·∫ßu b·ªè thu·ªëc) v√† s·ªë ƒëi·∫øu h√∫t m·ªói ng√†y
        //N·∫øu quitDate ch∆∞a ƒë·∫∑t ‚Üí kh√¥ng th·ªÉ t√≠nh dashboard ‚Üí return lu√¥n
        Plan plan = planOpt.get();
        LocalDate quitDate = plan.getQuitDate();
        int cigarettesPerDay = plan.getCigarettesPerDay();
        if (quitDate == null) return;

        List<Tracking> trackings = trackingRepo.findByUserId(userId);
        updateDashboard(userId, plan, trackings, quitDate, cigarettesPerDay);
    }


    //‚û°Ô∏è H√†m n√†y ƒë∆∞∆°c g·ªçi khi c·∫ßn update v√† render l·∫°i, ho·∫∑c ch∆∞a c√≥ g√¨ c·∫ßn t√≠nh to√°n ƒë·ªÉ render
    private DashboardDTO updateDashboard(Integer userId, Plan plan, List<Tracking> trackings,
                                         LocalDate quitDate, int cigarettesPerDay) {
        LocalDate today = LocalDate.now();
        var basic = dashboardMetricsService.calculateBasic(userId, quitDate, trackings, cigarettesPerDay);
        var milestone = milestoneService.calculate(plan, basic.getDaysSmokeFree());
        var timeMetrics = dashboardMetricsService.calculateTimeBased(trackings);
        List<String> topTriggers = trackingRepo.findTop3Triggers(userId);

        //‚û°Ô∏è N·∫øu ƒë√£ c√≥ b·∫£n ghi dashboard cho h√¥m nay ‚Üí x√≥a ƒëi ƒë·ªÉ ghi b·∫£n m·ªõi (tr√°nh tr√πng), v√¨ khi render l·∫°i do update th√¨ dashboard h√¥m ƒë√≥ ƒë√£ c√≥ r·ªìi ta x√≥a ƒëi v√† th√™m m·ªõi (Update tr√° h√¨nh)
        dashboardRepo.findByUserIdAndRecordedDate(userId, today).ifPresent(dashboardRepo::delete);
        //‚û°Ô∏è L∆∞u d≈© li·ªáu m·ªõi nh·∫•t xu·ªëng database
        Dashboard dashboard = dashboardMetricsService.saveDashboard(userId, basic, milestone, timeMetrics);

        //‚û°Ô∏è Tao DTO v√† ƒë·∫©y d·ªØ li·ªáu l√™n
        DashboardDTO dto = dashboardMetricsService.createDashboardDTO(userId, basic, milestone, timeMetrics, quitDate, topTriggers, cigarettesPerDay);

        //‚û°Ô∏è C√°i n√†y l√† websocket, l√† bean c·ªßa Spring (SimpMessagingTemplate) d√πng ƒë·ªÉ g·ª≠i message t·ªõi c√°c client ƒëang subcribe m·ªôt topic c·ª• th·ªÉ qua WebSocket.
        //üì≤ ‚Üí Ngay l·∫≠p t·ª©c d·ªØ li·ªáu dto ƒë∆∞·ª£c g·ª≠i ƒë·∫øn frontend qua WebSocket m√† kh√¥ng c·∫ßn frontend ph·∫£i fetch th·ªß c√¥ng.
        messagingTemplate.convertAndSend("/topic/dashboard/" + userId, dto);
        return dto;
    }
}

