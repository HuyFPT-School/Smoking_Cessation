package com.example.demo.service.AdminServicePackage.dashboard;

import com.example.demo.Repo.UserRepo;
import com.example.demo.entity.Role;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.TemporalAdjusters;

// ‚úÖ Service d√πng cho Admin Dashboard ‚Äî th·ªëng k√™ tƒÉng tr∆∞·ªüng s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng th∆∞·ªùng (Role.USER)
@Service  // Spring s·∫Ω qu·∫£n l√Ω bean n√†y ƒë·ªÉ t·ª± inject v√†o c√°c n∆°i c·∫ßn d√πng
public class UserGrowthService {

    // Inject repository ƒë·ªÉ thao t√°c v·ªõi b·∫£ng User
    @Autowired
    private UserRepo userRepo;

    // ===========================================
    // üìå 1. ƒê·∫æM T·ªîNG S·ªê USER
    // ===========================================

    /**
     * ‚úÖ Tr·∫£ v·ªÅ t·ªïng s·ªë ng∆∞·ªùi d√πng c√≥ role l√† USER (b·ªè qua ADMIN, SUPER_ADMIN)
     */
    public long countTotalUsers() {
        return userRepo.countByRole(Role.USER);
    }

    // ===========================================
    // üìå 2. T√çNH T·ª∂ L·ªÜ TƒÇNG TR∆Ø·ªûNG
    // ===========================================

    /**
     * ‚úÖ T√≠nh % tƒÉng tr∆∞·ªüng ng∆∞·ªùi d√πng trong th√°ng n√†y so v·ªõi th√°ng tr∆∞·ªõc
     * üìå C√¥ng th·ª©c: ((thisMonth - lastMonth) / lastMonth) * 100
     */
    public double calculateGrowthRate() {
        LocalDate today = LocalDate.now();  // Ng√†y hi·ªán t·∫°i

        // ===== Th√°ng hi·ªán t·∫°i =====
        LocalDateTime startCurrent = today.withDayOfMonth(1).atStartOfDay();  // 00:00 ng√†y 1
        LocalDateTime endCurrent = today.with(TemporalAdjusters.lastDayOfMonth()).atTime(23, 59, 59); // 23:59:59 ng√†y cu·ªëi

        // ===== Th√°ng tr∆∞·ªõc =====
        LocalDate lastMonth = today.minusMonths(1);
        LocalDateTime startLast = lastMonth.withDayOfMonth(1).atStartOfDay();  // 00:00 ng√†y 1 c·ªßa th√°ng tr∆∞·ªõc
        LocalDateTime endLast = lastMonth.with(TemporalAdjusters.lastDayOfMonth()).atTime(23, 59, 59);

        // S·ªë l∆∞·ª£ng user m·ªõi t·∫°o trong m·ªói th√°ng
        long usersThisMonth = userRepo.countByRoleAndCreateAtBetween(Role.USER, startCurrent, endCurrent);
        long usersLastMonth = userRepo.countByRoleAndCreateAtBetween(Role.USER, startLast, endLast);

        // ‚úÖ T√≠nh t·ª∑ l·ªá tƒÉng tr∆∞·ªüng
        if (usersLastMonth > 0) {
            return (double)(usersThisMonth - usersLastMonth) / usersLastMonth * 100;
        } else {
            // N·∫øu th√°ng tr∆∞·ªõc kh√¥ng c√≥ ai th√¨ coi nh∆∞ tƒÉng 100% n·∫øu c√≥ user m·ªõi, ho·∫∑c 0% n·∫øu v·∫´n kh√¥ng c√≥ ai
            return usersThisMonth > 0 ? 100 : 0;
        }
    }

    // ===========================================
    // üìå 3. L·∫§Y S·ªê USER M·ªöI TRONG TH√ÅNG N√ÄY
    // ===========================================

    /**
     * ‚úÖ Tr·∫£ v·ªÅ s·ªë ng∆∞·ªùi d√πng m·ªõi ƒë∆∞·ª£c t·∫°o trong th√°ng hi·ªán t·∫°i
     */
    public long getUsersThisMonth() {
        LocalDate today = LocalDate.now();

        LocalDateTime start = today.withDayOfMonth(1).atStartOfDay();  // 00:00 ng√†y 1
        LocalDateTime end = today.with(TemporalAdjusters.lastDayOfMonth()).atTime(23, 59, 59);  // 23:59:59 ng√†y cu·ªëi

        return userRepo.countByRoleAndCreateAtBetween(Role.USER, start, end);
    }
}
