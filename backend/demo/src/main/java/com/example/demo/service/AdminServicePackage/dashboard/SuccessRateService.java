package com.example.demo.service.AdminServicePackage.dashboard;

import com.example.demo.Repo.PlanRepo;
import com.example.demo.entity.Plan;
import com.example.demo.entity.RewardItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.temporal.TemporalAdjusters;
import java.util.List;

@Service
public class SuccessRateService {

    @Autowired
    private PlanRepo planRepo;

    @Autowired
    private CalculatorUtils calculatorUtils;

    /**
     * ‚úÖ T√≠nh t·ª∑ l·ªá % ng∆∞·ªùi d√πng ƒë√£ ho√†n th√†nh to√†n b·ªô c√°c m·ªëc ph·∫ßn th∆∞·ªüng (milestone) trong k·∫ø ho·∫°ch b·ªè thu·ªëc
     * üìå Th√†nh c√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l√†: s·ªë ng√†y kh√¥ng h√∫t ‚â• milestone cao nh·∫•t trong RewardItem c·ªßa Plan
     * üì§ K·∫øt qu·∫£ tr·∫£ v·ªÅ l√† ph·∫ßn trƒÉm, l√†m tr√≤n ƒë·∫øn 1 ch·ªØ s·ªë th·∫≠p ph√¢n
     */
    public double calculateSuccessRate() {

        // L·∫•y to√†n b·ªô k·∫ø ho·∫°ch b·ªè thu·ªëc
        List<Plan> plans = planRepo.findAll();

        int usersWithRewards = 0;
        int usersCompletedAll = 0;

        // Duy·ªát qua t·ª´ng k·∫ø ho·∫°ch
        for (Plan plan : plans) {
            List<RewardItem> rewards = plan.getRewards();

            // N·∫øu kh√¥ng c√≥ reward th√¨ b·ªè qua (kh√¥ng t√≠nh v√†o m·∫´u kh·∫£o s√°t)
            if (rewards == null || rewards.isEmpty()) continue;

            usersWithRewards++;

            // ‚úÖ T√¨m m·ªëc th·ªùi gian d√†i nh·∫•t trong ph·∫ßn th∆∞·ªüng (v√≠ d·ª•: "3 months" ‚Üí 90 ng√†y)
            long maxRequiredDays = rewards.stream()
                    .mapToLong(r -> calculatorUtils.getDaysFromMilestone(r.getMilestone()))
                    .max().orElse(0);  // N·∫øu kh√¥ng c√≥ th√¨ m·∫∑c ƒë·ªãnh l√† 0

            // ‚úÖ T√≠nh s·ªë ng√†y ng∆∞·ªùi d√πng ƒë√£ kh√¥ng h√∫t thu·ªëc th·ª±c t·∫ø
            long actualDays = calculatorUtils.calculateDaysSmokeFree(plan);
            if (actualDays >= maxRequiredDays) {
                usersCompletedAll++;
            }
        }
        return usersWithRewards == 0
                ? 0
                : Math.round((double) usersCompletedAll / usersWithRewards * 1000) / 10.0;
    }


    /**
     * ‚úÖ T√≠nh t·ªâ l·ªá % s·ªë ng√†y kh√¥ng h√∫t thu·ªëc t·ªïng th·ªÉ c·ªßa to√†n b·ªô ng∆∞·ªùi d√πng
     * üìå C√¥ng th·ª©c: (T·ªïng s·ªë ng√†y kh√¥ng h√∫t thu·ªëc) / (T·ªïng s·ªë ng√†y k·ªÉ t·ª´ ng√†y b·∫Øt ƒë·∫ßu plan) * 100
     * üì§ Tr·∫£ v·ªÅ s·ªë ph·∫ßn trƒÉm, l√†m tr√≤n ƒë·∫øn 1 ch·ªØ s·ªë th·∫≠p ph√¢n
     */
    public double calculateOverallSmokeFreeRate() {

        // L·∫•y t·∫•t c·∫£ c√°c k·∫ø ho·∫°ch b·ªè thu·ªëc c·ªßa ng∆∞·ªùi d√πng
        List<Plan> plans = planRepo.findAll();

        long totalSmokeFreeDays = 0;
        long totalPlanDays = 0;

        // Duy·ªát t·ª´ng plan
        for (Plan plan : plans) {
            LocalDate quitDate = plan.getQuitDate();

            // B·ªè qua n·∫øu k·∫ø ho·∫°ch kh√¥ng c√≥ ng√†y b·ªè thu·ªëc, ho·∫∑c b·ªè thu·ªëc ·ªü t∆∞∆°ng lai
            if (quitDate == null || quitDate.isAfter(LocalDate.now())) continue;

            // ‚úÖ C·ªông s·ªë ng√†y kh√¥ng h√∫t thu·ªëc (d·ª±a v√†o tracking c·ªßa user)
            totalSmokeFreeDays += calculatorUtils.calculateDaysSmokeFree(plan);

            // ‚úÖ C·ªông s·ªë ng√†y t·ª´ ng√†y b·ªè thu·ªëc ƒë·∫øn h√¥m nay (t·ªïng th·ªùi gian user c√≥ c∆° h·ªôi ƒë·ªÉ b·ªè thu·ªëc)
            totalPlanDays += calculatorUtils.calculateTotalDaysInRange(
                    quitDate,
                    quitDate,
                    LocalDate.now()
            );
        }
        return totalPlanDays == 0
                ? 0  // Tr√°nh chia 0 n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu n√†o h·ª£p l·ªá
                : Math.round((double) totalSmokeFreeDays / totalPlanDays * 1000) / 10.0;
    }


    /**
     * ‚úÖ T√≠nh ph·∫ßn trƒÉm s·ªë ng√†y ng∆∞·ªùi d√πng kh√¥ng h√∫t thu·ªëc trong th√°ng tr∆∞·ªõc
     * üìå C√°ch t√≠nh: (T·ªïng s·ªë ng√†y kh√¥ng h√∫t thu·ªëc trong th√°ng tr∆∞·ªõc) / (T·ªïng s·ªë ng√†y k·ªÉ t·ª´ quitDate ƒë·∫øn h√¥m nay c·ªßa t·∫•t c·∫£ k·∫ø ho·∫°ch) * 100
     * üì§ K·∫øt qu·∫£ l√†m tr√≤n ƒë·∫øn 1 ch·ªØ s·ªë th·∫≠p ph√¢n (%)
     */
    public double calculateLastMonthSmokeFreeRate() {

        // L·∫•y to√†n b·ªô k·∫ø ho·∫°ch b·ªè thu·ªëc c·ªßa ng∆∞·ªùi d√πng
        List<Plan> plans = planRepo.findAll();

        long totalSmokeFreeDaysLastMonth = 0;
        long totalAllPlanDays = 0;

        // X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian th√°ng tr∆∞·ªõc
        LocalDate today = LocalDate.now();
        LocalDate startOfLastMonth = today.minusMonths(1).withDayOfMonth(1);  // Ng√†y ƒë·∫ßu c·ªßa th√°ng tr∆∞·ªõc
        LocalDate endOfLastMonth = startOfLastMonth.with(TemporalAdjusters.lastDayOfMonth()); // Ng√†y cu·ªëi c·ªßa th√°ng tr∆∞·ªõc

        // Duy·ªát t·ª´ng k·∫ø ho·∫°ch b·ªè thu·ªëc
        for (Plan plan : plans) {
            LocalDate quitDate = plan.getQuitDate();

            // N·∫øu ch∆∞a c√≥ ng√†y quit ho·∫∑c ng√†y quit ·ªü t∆∞∆°ng lai th√¨ b·ªè qua
            if (quitDate == null || quitDate.isAfter(today)) continue;

            // ‚úÖ T√≠nh t·ªïng s·ªë ng√†y kh√¥ng h√∫t thu·ªëc trong kho·∫£ng th√°ng tr∆∞·ªõc (t√πy theo tracking c·ªßa t·ª´ng user)
            totalSmokeFreeDaysLastMonth += calculatorUtils.calculateSmokeFreeDaysInRange(
                    plan,
                    startOfLastMonth,
                    endOfLastMonth
            );

            // ‚úÖ T√≠nh t·ªïng s·ªë ng√†y t·ª´ ng√†y b·ªè thu·ªëc ƒë·∫øn h√¥m nay
            totalAllPlanDays += calculatorUtils.calculateTotalDaysInRange(
                    quitDate,
                    quitDate,
                    today
            );
        }
        return totalAllPlanDays == 0
                ? 0
                : Math.round((double) totalSmokeFreeDaysLastMonth / totalAllPlanDays * 1000) / 10.0;
    }


    /**
     * ‚úÖ T√≠nh s·ªë ng√†y cai thu·ªëc trung b√¨nh c·ªßa nh·ªØng ng∆∞·ªùi d√πng ƒë√£ ho√†n th√†nh to√†n b·ªô c√°c m·ªëc ph·∫ßn th∆∞·ªüng (milestone)
     * üìå Ch·ªâ t√≠nh cho nh·ªØng ng∆∞·ªùi m√† s·ªë ng√†y kh√¥ng h√∫t thu·ªëc ‚â• milestone cao nh·∫•t trong k·∫ø ho·∫°ch (Plan)
     * üî¢ Tr·∫£ v·ªÅ s·ªë ng√†y trung b√¨nh (ƒë√£ l√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n)
     */
    public double calculateAvgDaysQuitPerSuccessfulUser() {

        // L·∫•y to√†n b·ªô k·∫ø ho·∫°ch b·ªè thu·ªëc (m·ªói user c√≥ th·ªÉ c√≥ 1 Plan ri√™ng)
        List<Plan> plans = planRepo.findAll();

        int usersCompletedAll = 0;
        long totalSmokeFreeDays = 0;

        // Duy·ªát qua t·ª´ng Plan ƒë·ªÉ ki·ªÉm tra ti·∫øn ƒë·ªô c·ªßa ng∆∞·ªùi d√πng
        for (Plan plan : plans) {
            List<RewardItem> rewards = plan.getRewards();

            // B·ªè qua n·∫øu k·∫ø ho·∫°ch kh√¥ng c√≥ m·ªëc ph·∫ßn th∆∞·ªüng
            if (rewards == null || rewards.isEmpty()) continue;

            // ‚úÖ T√¨m milestone cao nh·∫•t m√† user c·∫ßn ƒë·∫°t trong k·∫ø ho·∫°ch n√†y
            long maxRequiredDays = rewards.stream()
                    .mapToLong(r -> calculatorUtils.getDaysFromMilestone(r.getMilestone()))  // Chuy·ªÉn milestone (string) th√†nh s·ªë ng√†y
                    .max().orElse(0);

            // ‚úÖ T√≠nh s·ªë ng√†y th·ª±c t·∫ø m√† user ƒë√£ kh√¥ng h√∫t thu·ªëc
            long daysSmokeFree = calculatorUtils.calculateDaysSmokeFree(plan);

            // N·∫øu user ƒë√£ v∆∞·ª£t qua m·ªëc cao nh·∫•t ‚Üí t√≠nh v√†o nh√≥m "th√†nh c√¥ng"
            if (daysSmokeFree >= maxRequiredDays) {
                usersCompletedAll++;
                totalSmokeFreeDays += daysSmokeFree;
            }
        }
        return usersCompletedAll == 0 ? 0 : Math.round((double) totalSmokeFreeDays / usersCompletedAll * 10) / 10.0;
    }


}
